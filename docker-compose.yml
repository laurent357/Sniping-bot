version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./frontend/trading-bot-ui
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./frontend/trading-bot-ui/nginx/ssl:/etc/nginx/ssl
    env_file:
      - .env
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.1.20"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Python
  backend:
    build:
      context: ./backend/python
      dockerfile: ../Dockerfile
    env_file:
      - .env
    environment:
      - FLASK_ENV=production
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - RUST_SERVICE_URL=rust:50051
      - PYTHONPATH=/usr/src/app
      - GEVENT_MONKEY=1
      - REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
      - SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      - PYTHONUNBUFFERED=1
      - AIOHTTP_NO_EXTENSIONS=1
    dns:
      - 8.8.8.8
      - 8.8.4.4
    command: >
      sh -c "apt-get update && apt-get install -y ca-certificates &&
             pip install 'flask[async]' gevent aiohttp &&
             python -c 'from gevent import monkey; monkey.patch_all(ssl=True, thread=False)' &&
             gunicorn --worker-class gevent --workers 1 --threads 4 --timeout 300 --graceful-timeout 300 --keep-alive 65 --log-level debug src.app:app --bind 0.0.0.0:5000 --reload"
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rust:
        condition: service_started
    volumes:
      - ./backend/python:/usr/src/app
    networks:
      - backend-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.1.20:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Rust
  rust:
    build:
      context: ./backend/rust
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - RUST_LOG=info
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
    volumes:
      - ./backend/rust/wallet:/app/wallet
    ports:
      - "50051:50051"
      - "8080:8080"
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.1.20:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de donn√©es
  db:
    image: postgres:14-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3001"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - logging-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root
    networks:
      - logging-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  frontend-network:
  backend-network:
  monitoring-network:
  logging-network: 